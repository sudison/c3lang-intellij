/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.c3lang.intellijplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.c3lang.intellijplugin.parser.psi.C3Type;
import org.c3lang.intellijplugin.parser.psi.C3Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>c3lang.flex</tt>
 */
class C3Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\2\12\1\0\1\12\23\0\1\12\1\64\2\0\1\11\1\60\2\0\1\50\1\53\1\67\1\57\1"+
    "\66\1\61\1\46\1\70\1\14\1\6\6\7\2\3\1\47\1\65\1\54\1\55\1\56\1\63\1\62\1\4"+
    "\1\15\4\4\10\1\1\17\10\1\1\21\2\1\1\73\1\0\1\74\1\71\1\10\1\0\1\23\1\16\1"+
    "\30\1\35\1\26\1\5\1\44\1\42\1\33\1\2\1\27\1\36\1\37\1\32\1\20\1\40\1\45\1"+
    "\25\1\24\1\31\1\34\1\13\1\41\1\22\1\43\1\2\1\51\1\72\1\52\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\2\1\1\5"+
    "\1\3\1\4\21\3\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\2\1\35\1\0\1\3\1\36\1\3"+
    "\1\0\1\37\2\40\1\0\5\40\1\3\3\0\3\3"+
    "\1\41\15\3\1\42\1\43\5\3\1\44\10\3\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\3\1\37\1\61\4\40\1\62"+
    "\1\40\1\3\3\4\14\3\1\63\3\3\1\64\17\3"+
    "\1\65\1\3\1\66\5\40\1\67\1\70\1\3\1\71"+
    "\4\3\1\72\1\73\2\3\1\74\1\75\1\76\1\3"+
    "\1\77\1\100\3\3\1\101\5\3\1\102\4\3\1\103"+
    "\1\104\1\105\1\40\1\106\1\107\1\110\1\40\1\111"+
    "\1\3\1\112\1\3\1\113\4\3\1\114\1\115\2\3"+
    "\1\116\1\117\1\3\1\120\1\3\1\121\2\40\1\122"+
    "\1\123\2\3\1\124\1\125\1\126\1\3\1\127\1\130"+
    "\1\40\1\3\1\131\1\132\1\133\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\75\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\75"+
    "\0\u0726\0\75\0\u0763\0\75\0\u07a0\0\u07dd\0\75\0\u081a"+
    "\0\75\0\u0857\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\u0894\0\u08d1\0\364\0\u090e\0\267"+
    "\0\u094b\0\u016e\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\267\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\267\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\267\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u09c5\0\u15ec\0\u1629\0\u0bea\0\u0c27"+
    "\0\u0c64\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4"+
    "\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\267\0\u1942\0\u197f"+
    "\0\u19bc\0\267\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\75\0\u1d8c\0\u09c5\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\267\0\267\0\u1efa\0\267\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\267\0\267\0\u202b\0\u2068\0\267\0\267\0\267"+
    "\0\u20a5\0\267\0\267\0\u20e2\0\u211f\0\u215c\0\267\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\267\0\u22ca\0\u2307\0\u2344"+
    "\0\u2381\0\267\0\267\0\267\0\u23be\0\u09c5\0\u09c5\0\u09c5"+
    "\0\u23fb\0\267\0\u2438\0\267\0\u2475\0\267\0\u24b2\0\u24ef"+
    "\0\u252c\0\u2569\0\267\0\267\0\u25a6\0\u25e3\0\267\0\267"+
    "\0\u2620\0\267\0\u265d\0\267\0\u269a\0\u26d7\0\267\0\267"+
    "\0\u2714\0\u2751\0\267\0\267\0\267\0\u278e\0\267\0\u09c5"+
    "\0\u27cb\0\u2808\0\267\0\267\0\u09c5\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\2\5\1\7"+
    "\1\10\1\11\1\12\1\13\1\3\1\14\1\3\1\4"+
    "\1\3\1\4\1\15\1\16\1\17\1\20\1\4\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\4\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\76\0\1\64\1\65\2\64\1\65"+
    "\2\64\1\3\2\0\1\65\2\64\1\65\1\64\1\65"+
    "\1\64\24\65\30\0\10\4\2\0\33\4\32\0\1\5"+
    "\2\0\2\5\1\66\3\0\1\5\61\0\10\4\2\0"+
    "\5\4\1\67\11\4\1\70\3\4\1\71\7\4\30\0"+
    "\1\3\1\4\1\0\1\3\1\4\2\0\1\72\2\0"+
    "\1\4\1\0\1\3\1\4\1\3\1\4\1\3\24\4"+
    "\30\0\1\73\1\74\1\0\1\73\1\75\2\0\1\76"+
    "\2\0\1\74\1\0\1\73\1\74\1\73\1\74\1\73"+
    "\2\74\1\77\1\74\1\100\1\74\1\101\2\74\1\102"+
    "\1\74\1\103\10\74\30\0\10\4\2\0\5\4\1\104"+
    "\25\4\44\0\2\105\2\106\2\107\53\0\10\4\2\0"+
    "\5\4\1\110\4\4\1\111\15\4\1\112\2\4\30\0"+
    "\10\4\2\0\11\4\1\113\21\4\30\0\10\4\2\0"+
    "\26\4\1\114\1\115\3\4\30\0\10\4\2\0\13\4"+
    "\1\116\17\4\30\0\10\4\2\0\12\4\1\117\4\4"+
    "\1\120\3\4\1\121\7\4\30\0\10\4\2\0\5\4"+
    "\1\122\2\4\1\123\16\4\1\124\3\4\30\0\10\4"+
    "\2\0\12\4\1\125\15\4\1\126\2\4\30\0\10\4"+
    "\2\0\13\4\1\127\5\4\1\130\11\4\30\0\4\4"+
    "\1\131\3\4\2\0\17\4\1\132\4\4\1\133\6\4"+
    "\30\0\10\4\2\0\11\4\1\134\5\4\1\135\1\136"+
    "\2\4\1\137\7\4\30\0\10\4\2\0\5\4\1\140"+
    "\5\4\1\141\17\4\30\0\10\4\2\0\5\4\1\142"+
    "\25\4\30\0\10\4\2\0\5\4\1\143\2\4\1\144"+
    "\22\4\30\0\10\4\2\0\21\4\1\145\11\4\30\0"+
    "\10\4\2\0\27\4\1\146\3\4\30\0\10\4\2\0"+
    "\10\4\1\147\22\4\30\0\10\4\2\0\21\4\1\150"+
    "\11\4\75\0\1\151\75\0\1\152\76\0\1\153\76\0"+
    "\1\154\76\0\1\155\74\0\1\156\76\0\1\157\1\160"+
    "\74\0\1\161\1\162\62\0\1\163\26\0\1\64\1\0"+
    "\2\64\1\0\3\64\3\0\2\64\1\0\1\64\1\0"+
    "\1\64\54\0\10\65\2\0\33\65\30\0\10\4\2\0"+
    "\12\4\1\164\20\4\30\0\10\4\2\0\5\4\1\165"+
    "\25\4\30\0\1\166\1\167\2\166\1\167\2\166\1\73"+
    "\2\0\1\167\2\166\1\167\1\166\1\167\1\166\24\167"+
    "\30\0\10\74\2\0\33\74\30\0\10\74\2\0\5\74"+
    "\1\170\25\74\30\0\1\73\1\74\1\0\1\73\1\74"+
    "\2\0\1\76\2\0\1\74\1\0\1\73\1\74\1\73"+
    "\1\74\1\73\24\74\30\0\10\74\2\0\26\74\1\171"+
    "\4\74\30\0\10\74\2\0\23\74\1\172\7\74\30\0"+
    "\10\74\2\0\10\74\1\173\22\74\30\0\4\74\1\174"+
    "\3\74\2\0\33\74\30\0\10\74\2\0\13\74\1\175"+
    "\17\74\30\0\10\4\2\0\20\4\1\176\12\4\35\0"+
    "\1\177\1\0\1\105\3\0\1\177\66\0\2\200\1\106"+
    "\3\0\1\200\63\0\5\201\1\107\3\0\3\201\4\0"+
    "\1\201\2\0\1\201\1\0\1\201\4\0\1\201\40\0"+
    "\10\4\2\0\5\4\1\202\25\4\30\0\10\4\2\0"+
    "\13\4\1\203\17\4\30\0\10\4\2\0\16\4\1\204"+
    "\14\4\30\0\10\4\2\0\20\4\1\205\12\4\30\0"+
    "\10\4\2\0\5\4\1\206\25\4\30\0\10\4\2\0"+
    "\16\4\1\207\14\4\30\0\10\4\2\0\12\4\1\210"+
    "\20\4\30\0\10\4\2\0\21\4\1\211\11\4\30\0"+
    "\10\4\2\0\11\4\1\212\21\4\30\0\10\4\2\0"+
    "\17\4\1\213\13\4\30\0\10\4\2\0\11\4\1\214"+
    "\21\4\30\0\10\4\2\0\10\4\1\215\22\4\30\0"+
    "\10\4\2\0\30\4\1\216\2\4\30\0\10\4\2\0"+
    "\25\4\1\217\5\4\30\0\10\4\2\0\7\4\1\220"+
    "\23\4\30\0\10\4\2\0\23\4\1\221\7\4\30\0"+
    "\10\4\2\0\16\4\1\222\14\4\30\0\10\4\2\0"+
    "\25\4\1\223\5\4\30\0\10\4\2\0\27\4\1\224"+
    "\3\4\30\0\10\4\2\0\20\4\1\225\12\4\30\0"+
    "\10\4\2\0\17\4\1\226\13\4\30\0\10\4\2\0"+
    "\5\4\1\227\25\4\30\0\10\4\2\0\21\4\1\230"+
    "\11\4\30\0\4\4\1\231\3\4\2\0\33\4\30\0"+
    "\10\4\2\0\15\4\1\232\1\4\1\233\13\4\30\0"+
    "\10\4\2\0\22\4\1\234\10\4\30\0\10\4\2\0"+
    "\15\4\1\235\15\4\30\0\10\4\2\0\3\4\1\236"+
    "\27\4\30\0\10\4\2\0\20\4\1\237\12\4\30\0"+
    "\10\4\2\0\23\4\1\240\7\4\30\0\10\4\2\0"+
    "\10\4\1\241\22\4\75\0\1\242\27\0\10\4\2\0"+
    "\10\4\1\243\22\4\30\0\1\166\1\0\2\166\1\0"+
    "\3\166\3\0\2\166\1\0\1\166\1\0\1\166\54\0"+
    "\10\167\2\0\33\167\30\0\10\74\2\0\12\74\1\244"+
    "\20\74\30\0\10\74\2\0\20\74\1\245\12\74\30\0"+
    "\10\74\2\0\11\74\1\246\6\74\1\247\12\74\30\0"+
    "\10\74\2\0\11\74\1\250\21\74\30\0\4\74\1\251"+
    "\3\74\2\0\33\74\30\0\10\4\2\0\22\4\1\252"+
    "\10\4\30\0\10\4\2\0\23\4\1\253\7\4\30\0"+
    "\10\4\2\0\10\4\1\254\22\4\30\0\10\4\2\0"+
    "\13\4\1\255\17\4\30\0\10\4\2\0\16\4\1\256"+
    "\14\4\30\0\10\4\2\0\12\4\1\257\20\4\30\0"+
    "\10\4\2\0\21\4\1\260\11\4\30\0\10\4\2\0"+
    "\5\4\1\261\25\4\30\0\10\4\2\0\24\4\1\262"+
    "\6\4\30\0\10\4\2\0\13\4\1\263\17\4\30\0"+
    "\10\4\2\0\11\4\1\264\4\4\1\265\14\4\30\0"+
    "\10\4\2\0\13\4\1\266\2\4\1\267\14\4\30\0"+
    "\10\4\2\0\12\4\1\270\20\4\30\0\10\4\2\0"+
    "\13\4\1\271\17\4\30\0\10\4\2\0\16\4\1\272"+
    "\14\4\30\0\10\4\2\0\23\4\1\273\7\4\30\0"+
    "\10\4\2\0\5\4\1\274\25\4\30\0\10\4\2\0"+
    "\5\4\1\275\25\4\30\0\10\4\2\0\5\4\1\276"+
    "\25\4\30\0\10\4\2\0\16\4\1\277\14\4\30\0"+
    "\10\4\2\0\17\4\1\300\13\4\30\0\10\4\2\0"+
    "\3\4\1\301\27\4\30\0\10\4\2\0\10\4\1\302"+
    "\2\4\1\303\17\4\30\0\10\4\2\0\10\4\1\304"+
    "\22\4\30\0\10\4\2\0\31\4\1\305\1\4\30\0"+
    "\10\4\2\0\21\4\1\306\11\4\30\0\10\4\2\0"+
    "\12\4\1\307\20\4\30\0\10\4\2\0\23\4\1\310"+
    "\7\4\30\0\10\4\2\0\23\4\1\311\7\4\30\0"+
    "\4\4\1\312\3\4\2\0\33\4\30\0\10\4\2\0"+
    "\22\4\1\313\10\4\30\0\10\4\2\0\16\4\1\314"+
    "\14\4\30\0\10\74\2\0\16\74\1\315\14\74\30\0"+
    "\10\74\2\0\13\74\1\316\17\74\30\0\4\74\1\317"+
    "\3\74\2\0\33\74\30\0\10\74\2\0\13\74\1\320"+
    "\17\74\30\0\10\74\2\0\10\74\1\321\22\74\30\0"+
    "\10\4\2\0\14\4\1\322\16\4\30\0\10\4\2\0"+
    "\15\4\1\323\15\4\30\0\10\4\2\0\16\4\1\324"+
    "\14\4\30\0\10\4\2\0\12\4\1\325\20\4\30\0"+
    "\10\4\2\0\12\4\1\263\20\4\30\0\10\4\2\0"+
    "\16\4\1\326\14\4\30\0\10\4\2\0\20\4\1\327"+
    "\12\4\30\0\10\4\2\0\22\4\1\330\10\4\30\0"+
    "\10\4\2\0\12\4\1\331\20\4\30\0\10\4\2\0"+
    "\12\4\1\332\20\4\30\0\10\4\2\0\17\4\1\333"+
    "\13\4\30\0\10\4\2\0\31\4\1\334\1\4\30\0"+
    "\10\4\2\0\23\4\1\335\7\4\30\0\10\4\2\0"+
    "\21\4\1\336\11\4\30\0\10\4\2\0\12\4\1\337"+
    "\20\4\30\0\10\4\2\0\23\4\1\340\7\4\30\0"+
    "\10\4\2\0\23\4\1\341\7\4\30\0\10\4\2\0"+
    "\5\4\1\342\25\4\30\0\10\4\2\0\20\4\1\343"+
    "\12\4\30\0\10\4\2\0\13\4\1\344\17\4\30\0"+
    "\10\74\2\0\15\74\1\345\15\74\30\0\10\74\2\0"+
    "\21\74\1\346\11\74\30\0\10\4\2\0\27\4\1\347"+
    "\3\4\30\0\10\4\2\0\17\4\1\350\13\4\30\0"+
    "\10\4\2\0\17\4\1\351\13\4\30\0\10\4\2\0"+
    "\13\4\1\352\17\4\30\0\10\4\2\0\16\4\1\353"+
    "\14\4\30\0\10\4\2\0\16\4\1\354\14\4\30\0"+
    "\10\4\2\0\13\4\1\355\17\4\30\0\10\4\2\0"+
    "\23\4\1\356\7\4\30\0\10\4\2\0\13\4\1\357"+
    "\17\4\30\0\10\4\2\0\15\4\1\350\15\4\30\0"+
    "\10\74\2\0\27\74\1\360\3\74\30\0\10\74\2\0"+
    "\23\74\1\361\7\74\30\0\10\4\2\0\21\4\1\362"+
    "\11\4\30\0\4\4\1\363\3\4\2\0\33\4\30\0"+
    "\10\4\2\0\16\4\1\364\14\4\30\0\10\74\2\0"+
    "\16\74\1\365\14\74\30\0\10\4\2\0\13\4\1\366"+
    "\17\4\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10309];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\26\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\11\11"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\6\1\3\0"+
    "\42\1\12\11\56\1\1\11\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  C3Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 93: break;
          case 2: 
            { return C3Types.CONST_IDENT;
            } 
            // fall through
          case 94: break;
          case 3: 
            { return C3Types.IDENT;
            } 
            // fall through
          case 95: break;
          case 4: 
            { return C3Types.INT_LITERAL;
            } 
            // fall through
          case 96: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 97: break;
          case 6: 
            { return C3Types.DOT;
            } 
            // fall through
          case 98: break;
          case 7: 
            { return C3Types.COLON;
            } 
            // fall through
          case 99: break;
          case 8: 
            { return C3Types.LP;
            } 
            // fall through
          case 100: break;
          case 9: 
            { return C3Types.LBR;
            } 
            // fall through
          case 101: break;
          case 10: 
            { return C3Types.RBR;
            } 
            // fall through
          case 102: break;
          case 11: 
            { return C3Types.RP;
            } 
            // fall through
          case 103: break;
          case 12: 
            { return C3Types.LT_OP;
            } 
            // fall through
          case 104: break;
          case 13: 
            { return C3Types.EQ;
            } 
            // fall through
          case 105: break;
          case 14: 
            { return C3Types.GT_OP;
            } 
            // fall through
          case 106: break;
          case 15: 
            { return C3Types.ADD_OP;
            } 
            // fall through
          case 107: break;
          case 16: 
            { return C3Types.MOD_OP;
            } 
            // fall through
          case 108: break;
          case 17: 
            { return C3Types.SUB_OP;
            } 
            // fall through
          case 109: break;
          case 18: 
            { return C3Types.AT;
            } 
            // fall through
          case 110: break;
          case 19: 
            { return C3Types.QUESTION;
            } 
            // fall through
          case 111: break;
          case 20: 
            { return C3Types.BANG;
            } 
            // fall through
          case 112: break;
          case 21: 
            { return C3Types.EOS;
            } 
            // fall through
          case 113: break;
          case 22: 
            { return C3Types.COMMA;
            } 
            // fall through
          case 114: break;
          case 23: 
            { return C3Types.STAR;
            } 
            // fall through
          case 115: break;
          case 24: 
            { return C3Types.DIV_OP;
            } 
            // fall through
          case 116: break;
          case 25: 
            { return C3Types.BIT_XOR_OP;
            } 
            // fall through
          case 117: break;
          case 26: 
            { return C3Types.BIT_OR_OP;
            } 
            // fall through
          case 118: break;
          case 27: 
            { return C3Types.LB;
            } 
            // fall through
          case 119: break;
          case 28: 
            { return C3Types.RB;
            } 
            // fall through
          case 120: break;
          case 29: 
            { return C3Types.TYPE_IDENT;
            } 
            // fall through
          case 121: break;
          case 30: 
            { return C3Types.FUNC_KW;
            } 
            // fall through
          case 122: break;
          case 31: 
            { return C3Types.CT_CONST_IDENT;
            } 
            // fall through
          case 123: break;
          case 32: 
            { return C3Types.CT_IDENT;
            } 
            // fall through
          case 124: break;
          case 33: 
            { return C3Types.AS_KW;
            } 
            // fall through
          case 125: break;
          case 34: 
            { return C3Types.IF_KW;
            } 
            // fall through
          case 126: break;
          case 35: 
            { return C3Types.IN_KW;
            } 
            // fall through
          case 127: break;
          case 36: 
            { return C3Types.DO_KW;
            } 
            // fall through
          case 128: break;
          case 37: 
            { return C3Types.DOTDOT;
            } 
            // fall through
          case 129: break;
          case 38: 
            { return C3Types.SCOPE;
            } 
            // fall through
          case 130: break;
          case 39: 
            { return C3Types.FN_BLOCK_START;
            } 
            // fall through
          case 131: break;
          case 40: 
            { return C3Types.FN_BLOCK_END;
            } 
            // fall through
          case 132: break;
          case 41: 
            { return C3Types.LE_OP;
            } 
            // fall through
          case 133: break;
          case 42: 
            { return C3Types.GE_OP;
            } 
            // fall through
          case 134: break;
          case 43: 
            { return C3Types.INC_OP;
            } 
            // fall through
          case 135: break;
          case 44: 
            { return C3Types.ADD_MOD_OP;
            } 
            // fall through
          case 136: break;
          case 45: 
            { return C3Types.SUB_MOD_OP;
            } 
            // fall through
          case 137: break;
          case 46: 
            { return C3Types.DEC_OP;
            } 
            // fall through
          case 138: break;
          case 47: 
            { return C3Types.ELVIS;
            } 
            // fall through
          case 139: break;
          case 48: 
            { return C3Types.FOR_KW;
            } 
            // fall through
          case 140: break;
          case 49: 
            { return C3Types.CT_TYPE_IDENT;
            } 
            // fall through
          case 141: break;
          case 50: 
            { return C3Types.CTIF_KW;
            } 
            // fall through
          case 142: break;
          case 51: 
            { return C3Types.TRY_KW;
            } 
            // fall through
          case 143: break;
          case 52: 
            { return C3Types.INT_KW;
            } 
            // fall through
          case 144: break;
          case 53: 
            { return C3Types.ELLIPSIS;
            } 
            // fall through
          case 145: break;
          case 54: 
            { return C3Types.CTFOR_KW;
            } 
            // fall through
          case 146: break;
          case 55: 
            { return C3Types.VOID_KW;
            } 
            // fall through
          case 147: break;
          case 56: 
            { return C3Types.BOOL_KW;
            } 
            // fall through
          case 148: break;
          case 57: 
            { return C3Types.BYTE_KW;
            } 
            // fall through
          case 149: break;
          case 58: 
            { return C3Types.ENUM_KW;
            } 
            // fall through
          case 150: break;
          case 59: 
            { return C3Types.ELSE_KW;
            } 
            // fall through
          case 151: break;
          case 60: 
            { return C3Types.CASE_KW;
            } 
            // fall through
          case 152: break;
          case 61: 
            { return C3Types.CAST_KW;
            } 
            // fall through
          case 153: break;
          case 62: 
            { return C3Types.CHAR_KW;
            } 
            // fall through
          case 154: break;
          case 63: 
            { return C3Types.NEXT_KW;
            } 
            // fall through
          case 155: break;
          case 64: 
            { return C3Types.NULL_KW;
            } 
            // fall through
          case 156: break;
          case 65: 
            { return C3Types.UINT_KW;
            } 
            // fall through
          case 157: break;
          case 66: 
            { return C3Types.LONG_KW;
            } 
            // fall through
          case 158: break;
          case 67: 
            { return C3Types.HALF_KW;
            } 
            // fall through
          case 159: break;
          case 68: 
            { return C3Types.QUAD_KW;
            } 
            // fall through
          case 160: break;
          case 69: 
            { return C3Types.FLOAT_KW;
            } 
            // fall through
          case 161: break;
          case 70: 
            { return C3Types.CTELSE_KW;
            } 
            // fall through
          case 162: break;
          case 71: 
            { return C3Types.CTELIF_KW;
            } 
            // fall through
          case 163: break;
          case 72: 
            { return C3Types.CTCASE_KW;
            } 
            // fall through
          case 164: break;
          case 73: 
            { return C3Types.BREAK_KW;
            } 
            // fall through
          case 165: break;
          case 74: 
            { return C3Types.SHORT_KW;
            } 
            // fall through
          case 166: break;
          case 75: 
            { return C3Types.CONST_KW;
            } 
            // fall through
          case 167: break;
          case 76: 
            { return C3Types.UNION_KW;
            } 
            // fall through
          case 168: break;
          case 77: 
            { return C3Types.ULONG_KW;
            } 
            // fall through
          case 169: break;
          case 78: 
            { return C3Types.DEFER_KW;
            } 
            // fall through
          case 170: break;
          case 79: 
            { return C3Types.LOCAL_KW;
            } 
            // fall through
          case 171: break;
          case 80: 
            { return C3Types.MACRO_KW;
            } 
            // fall through
          case 172: break;
          case 81: 
            { return C3Types.WHILE_KW;
            } 
            // fall through
          case 173: break;
          case 82: 
            { return C3Types.SWITCH_KW;
            } 
            // fall through
          case 174: break;
          case 83: 
            { return C3Types.PUBLIC_KW;
            } 
            // fall through
          case 175: break;
          case 84: 
            { return C3Types.IMPORT_KW;
            } 
            // fall through
          case 176: break;
          case 85: 
            { return C3Types.USHORT_KW;
            } 
            // fall through
          case 177: break;
          case 86: 
            { return C3Types.DOUBLE_KW;
            } 
            // fall through
          case 178: break;
          case 87: 
            { return C3Types.MODULE_KW;
            } 
            // fall through
          case 179: break;
          case 88: 
            { return C3Types.CTSWITCH_KW;
            } 
            // fall through
          case 180: break;
          case 89: 
            { return C3Types.TYPEDEF_KW;
            } 
            // fall through
          case 181: break;
          case 90: 
            { return C3Types.DEFAULT_KW;
            } 
            // fall through
          case 182: break;
          case 91: 
            { return C3Types.CTDEFAULT_KW;
            } 
            // fall through
          case 183: break;
          case 92: 
            { return C3Types.CONTINUE_KW;
            } 
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
